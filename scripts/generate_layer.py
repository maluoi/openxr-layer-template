#!/usr/bin/env python3
"""
OpenXR Layer Code Generator

Generates complete source files that are directly included in the build.
No manual copying needed!
"""

import os
import sys
import argparse
from pathlib import Path

# Import the layer configuration
import layer_config

# Import the OpenXR parser
from openxr_parser import OpenXRParser, find_openxr_xml

def generate_layer_gen_h(parser):
	"""Generate layer_gen.h with function pointer declarations"""
	requested = set(layer_config.requested_functions)
	# Add all override functions since they need cached pointers
	requested.update(layer_config.override_functions)
	# Add functions that are always needed
	requested.add("xrDestroyInstance")

	declarations = []
	for func in sorted(requested):
		declarations.append(f"    PFN_{func} {func};")

	return f"""// AUTO-GENERATED FILE - DO NOT EDIT
// Generated by scripts/generate_layer.py

#ifndef LAYER_GEN_H
#define LAYER_GEN_H

// Generated function pointer declarations for LayerContext
// These are automatically included in layer.h

{chr(10).join(declarations)}

#endif // LAYER_GEN_H
"""

def generate_layer_gen_c(parser):
	"""Generate layer_gen.c with function resolution code"""
	requested = set(layer_config.requested_functions)
	# Add all override functions since they need cached pointers
	requested.update(layer_config.override_functions)
	# Add functions that are always needed
	requested.add("xrDestroyInstance")

	resolutions = []
	for func in sorted(requested):
		resolutions.append(f"""    // Resolve {func}
	result = ctx->next_get_instance_proc_addr(ctx->instance, "{func}", (PFN_xrVoidFunction*)&ctx->{func});
	if (XR_FAILED(result)) {{
		fprintf(stderr, "%s: Failed to resolve %s\\n", LAYER_NAME, "{func}");
		return result;
	}}""")

	return f"""// AUTO-GENERATED FILE - DO NOT EDIT
// Generated by scripts/generate_layer.py

#include "layer.h"
#include <stdio.h>

// Generated function resolution code
// This is automatically called from layer.c

XrResult resolve_generated_functions(layer_context_t* ctx) {{
	if (!ctx || !ctx->next_get_instance_proc_addr) {{
		return XR_ERROR_INITIALIZATION_FAILED;
	}}

	XrResult result;

{chr(10).join(resolutions)}

	return XR_SUCCESS;
}}
"""

def generate_dispatch_gen_h(parser):
	"""Generate dispatch_gen.h with forward declarations"""
	overrides = layer_config.override_functions

	declarations = []
	for func in overrides:
		if parser:
			cmd = parser.get_command(func)
			if cmd:
				params = cmd.get_param_list()
				declarations.append(f"XRAPI_ATTR {cmd.return_type} XRAPI_CALL layer_{func}({params});")
			else:
				declarations.append(f"// ERROR: {func} not found in OpenXR spec")
				declarations.append(f"XRAPI_ATTR XrResult XRAPI_CALL layer_{func}(void);")
		else:
			declarations.append(f"// TODO: Build project to get function signature for {func}")
			declarations.append(f"XRAPI_ATTR XrResult XRAPI_CALL layer_{func}(void);")

	return f"""// AUTO-GENERATED FILE - DO NOT EDIT
// Generated by scripts/generate_layer.py

#ifndef DISPATCH_GEN_H
#define DISPATCH_GEN_H

// Forward declarations for intercepted functions

{chr(10).join(declarations)}

#endif // DISPATCH_GEN_H
"""

def generate_dispatch_gen_cases(parser):
	"""Generate dispatch_gen_cases.inc with dispatch cases"""
	overrides = layer_config.override_functions

	cases = []
	for func in overrides:
		cases.append(f"""    if (strcmp(name, "{func}") == 0) {{
		*function = (PFN_xrVoidFunction)layer_{func};
		return XR_SUCCESS;
	}}""")

	return f"""// AUTO-GENERATED FILE - DO NOT EDIT
// Generated by scripts/generate_layer.py
//
// Dispatch cases for xrGetInstanceProcAddr

{chr(10).join(cases)}
"""

def generate_dispatch_gen_c(parser):
	"""Generate dispatch_gen.c with interceptor implementations"""
	overrides = layer_config.override_functions

	implementations = []
	for func in overrides:
		if parser:
			cmd = parser.get_command(func)
			if cmd:
				params = cmd.get_param_list()
				args = cmd.get_arg_list()

				# Determine instance parameter
				instance_param = "instance"
				if cmd.params:
					first_param = cmd.params[0]
					if 'Instance' in first_param.type:
						instance_param = first_param.name
					elif 'Session' in first_param.type:
						instance_param = "ctx->instance"

				implementations.append(f"""
XRAPI_ATTR {cmd.return_type} XRAPI_CALL layer_{func}({params}) {{

	return g_context.{func}({args});
}}""")
			else:
				implementations.append(f"""
// {func} - ERROR: Not found in OpenXR spec
XRAPI_ATTR XrResult XRAPI_CALL layer_{func}(void) {{
	return XR_ERROR_FUNCTION_UNSUPPORTED;
}}""")
		else:
			implementations.append(f"""
// {func} - TODO: Build project first to get signature
XRAPI_ATTR XrResult XRAPI_CALL layer_{func}(void) {{
	return XR_ERROR_FUNCTION_UNSUPPORTED;
}}""")

	return f"""// Interceptor implementations - MODIFY THIS FILE!
// Auto-generated by scripts/generate_layer.py
// Re-generating will overwrite this file - make backups of your changes!

#include "layer_config.h"
#include "layer.h"
#include <openxr/openxr.h>

// Auto-generated interceptor implementations
{chr(10).join(implementations)}
"""

def main():
	parser_obj = argparse.ArgumentParser(
		description='Generate OpenXR layer code - creates files used directly in build',
		formatter_class=argparse.RawDescriptionHelpFormatter,
		epilog="""
The generator creates files that are automatically included in the build.

Generated files:
  src/dispatch.c                   - Main interceptor implementations (modify this!)
  src/generated/layer_gen.h        - Function pointer declarations
  src/generated/layer_gen.c        - Function resolution code
  src/generated/dispatch_gen.h     - Forward declarations
  src/generated/dispatch_gen_cases.inc - Dispatch cases

Configuration:
  Edit scripts/layer_config.py to specify functions to intercept
		"""
	)

	parser_obj.add_argument('--output', type=str, default='src/generated', help='Output directory (default: src/generated)')

	args = parser_obj.parse_args()

	print("OpenXR Layer Code Generator")
	print("=" * 60)

	# Try to load OpenXR spec
	xml_path = find_openxr_xml()
	openxr_parser = None

	if xml_path:
		print(f"✓ Found OpenXR spec: {Path(xml_path).name}")
		try:
			openxr_parser = OpenXRParser(xml_path)
			print(f"✓ Parsed {len(openxr_parser.commands)} OpenXR commands")
		except Exception as e:
			print(f"✗ Failed to parse: {e}")
	else:
		print("✗ OpenXR spec not found")
		print("  Run 'cmake ..' in build/ directory first")

	print()
	print(f"Override functions: {len(layer_config.override_functions)}")
	for func in layer_config.override_functions:
		if openxr_parser and openxr_parser.get_command(func):
			print(f"  ✓ {func}")
		else:
			print(f"  ✗ {func} (not found)")

	print(f"\nRequested functions: {len(layer_config.requested_functions)}")
	for func in layer_config.requested_functions:
		if openxr_parser and openxr_parser.get_command(func):
			print(f"  ✓ {func}")
		else:
			print(f"  ✗ {func}")

	print("=" * 60)
	print()

	# Create output directory
	output_dir = Path(args.output)
	output_dir.mkdir(parents=True, exist_ok=True)

	# Generate files - dispatch.c goes to src/, others to src/generated/
	files_to_generate = {
		'layer_gen.h': (output_dir, generate_layer_gen_h(openxr_parser)),
		'layer_gen.c': (output_dir, generate_layer_gen_c(openxr_parser)),
		'dispatch_gen.h': (output_dir, generate_dispatch_gen_h(openxr_parser)),
		'dispatch_gen_cases.inc': (output_dir, generate_dispatch_gen_cases(openxr_parser)),
	}

	# dispatch.c goes to src/ (one level up from generated/)
	src_dir = output_dir.parent
	files_to_generate['dispatch.c'] = (src_dir, generate_dispatch_gen_c(openxr_parser))

	for filename, (target_dir, content) in files_to_generate.items():
		filepath = target_dir / filename
		filepath.write_text(content)
		print(f"✓ Generated {filepath}")

	print()
	mode = "FULL AUTO" if openxr_parser else "STUB"
	print(f"Generation complete ({mode} mode)")

	if openxr_parser:
		print("✓ All function signatures resolved automatically!")
	else:
		print("⚠ Build the project first for full automatic generation")

	print("\nThe generated files are automatically included in the build.")

if __name__ == "__main__":
	main()
